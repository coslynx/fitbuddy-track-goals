const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { z } = require('zod');
const User = require('../models/User');

const registerSchema = z.object({
  username: z.string().min(3).max(50),
  email: z.string().email(),
  password: z.string().min(6),
});


const loginSchema = z.object({
    email: z.string().email(),
    password: z.string().min(6),
  });

const authController = {
  register: async (req, res) => {
    try {
      const { username, email, password } = req.body;

      const validatedData = registerSchema.parse({ username, email, password });

      const existingUser = await User.findOne({ email: validatedData.email });
        if (existingUser) {
          return res.status(409).json({ message: 'Email already registered' });
      }


      const hashedPassword = await bcrypt.hash(validatedData.password, 10);

      const newUser = new User({
        username: validatedData.username,
        email: validatedData.email,
        password: hashedPassword,
      });

      await newUser.save();


        res.status(201).json({ message: 'User registered successfully', userId: newUser._id });
    } catch (error) {
        if (error instanceof z.ZodError) {
            return res.status(400).json({ message: 'Validation error', errors: error.errors });
        }
        console.error('Error during registration:', error);
      res.status(500).json({ message: 'Internal server error' });
    }
  },

  login: async (req, res) => {
    try {
        const { email, password } = req.body;
      
      const validatedData = loginSchema.parse({email, password})

      const user = await User.findOne({ email: validatedData.email });

      if (!user) {
          return res.status(401).json({ message: 'Invalid credentials' });
      }

      const passwordMatch = await bcrypt.compare(validatedData.password, user.password);

      if (!passwordMatch) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
        expiresIn: '1h',
      });


      res.status(200).json({ token });
    } catch (error) {
        if (error instanceof z.ZodError) {
            return res.status(400).json({ message: 'Validation error', errors: error.errors });
        }
      console.error('Error during login:', error);
      res.status(500).json({ message: 'Internal server error' });
    }
  },

    logout: async (req, res) => {
        res.status(204).send();
    },
};

module.exports = authController;